const fs = require("fs");
const http = require("http");
const url = require("url");

//////////////////////////////////////
// FILES

// If the encoding option (like 'utf-8' or other) is specified then this function returns a string. Otherwise it returns a buffer.
// Blocking, synchronous way
// const textIn = fs.readFileSync('./txt/input.txt', 'utf-8');
// console.log(textIn);

// const textOut = `This is what we know about the avocado: ${textIn}.\nCreated on ${Date.now()}`;
// fs.writeFileSync('./txt/output.txt', textOut); //–ó–∞–ø–∏—Å—É—î–º–æ –≤ —Ñ–∞–π–ª output.txt
// console.log('File written!');

// Non-blocking, asynchronous way
// fs.readFile('./txt/start.txt', 'utf-8', (err, data)=>{
//       console.log(data);
// })

//console.log('Reading file...'); //–¶–µ–π —Ä—è–¥–æ–∫ –≤–∏–≤–µ–¥–µ—Ç—å—Å—è –ø–µ—Ä—à–∏–º, –æ—Å–∫—ñ–ª—å–∫–∏ readFile —î –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–º —ñ –Ω–µ –±–ª–æ–∫—É—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–¥—É

//—á–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –≤–º—ñ—Å—Ç—É —Ñ–∞–π–ª—É
// fs.readFile('./txt/starttttt.txt', 'utf-8', (err, data1)=>{
//    if(err) return console.log('ERROR! üí•');
//    fs.readFile(`./txt/${data1}.txt`, 'utf-8', (err, data2)=>{
//       console.log(data2);
//       fs.readFile(`./txt/append.txt`, 'utf-8', (err, data3)=>{
//          console.log(data3);
//          fs.writeFile('./txt/final.txt', `${data2}\n${data3}`, 'utf-8', err=>{
//             console.log('Your file has been written üòÅ');
//          })
//       })
//    })
// })

// console.log('Will read file!'); //–¶–µ–π —Ä—è–¥–æ–∫ –≤–∏–≤–µ–¥–µ—Ç—å—Å—è –ø–µ—Ä—à–∏–º, –æ—Å–∫—ñ–ª—å–∫–∏ readFile —î –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–º —ñ –Ω–µ –±–ª–æ–∫—É—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–¥—É

//////////////////////////////////////
// SERVER

const data = fs.readFileSync(`${__dirname}/dev-data/data.json`, "utf-8");
const dataObj = JSON.parse(data); //–ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ JSON-—Ä—è–¥–æ–∫ –Ω–∞ –æ–±'—î–∫—Ç JavaScript


// —Å—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Ä–≤–µ—Ä –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é http –º–æ–¥—É–ª—è
const server = http.createServer((req, res) => {
  console.log(req.url); //–í–∏–≤–æ–¥–∏–º–æ –∑–∞–ø–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –¥–≤–∞ —Ä–∞–∑–∏, –æ—Å–∫—ñ–ª—å–∫–∏ –±—Ä–∞—É–∑–µ—Ä —Ä–æ–±–∏—Ç—å –¥–≤–∞ –∑–∞–ø–∏—Ç–∏: –æ–¥–∏–Ω –Ω–∞ localhost:8000, –¥—Ä—É–≥–∏–π –Ω–∞ favicon.ico
  const pathName = req.url; //–∑–±–µ—Ä—ñ–≥–∞—î–º–æ —à–ª—è—Ö –∑–∞–ø–∏—Ç—É –≤ –∑–º—ñ–Ω–Ω—É pathName
  if (pathName === "/" || pathName === "/overview") {
    res.end("This is the OVERVIEW");
  } else if (pathName === "/product") {
    res.end("This is the PRODUCT");
  } else if (pathName === "/api") {
    //${__dirname} - —Ü–µ –∑–º—ñ–Ω–Ω–∞, —è–∫–∞ –º—ñ—Å—Ç–∏—Ç—å —à–ª—è—Ö –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó –ø–∞–ø–∫–∏
     //—á–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª data.json
   //  fs.readFile(`${__dirname}/dev-data/data.json`, "utf-8", (err, data) => {
   //    if (err) {
   //       res.writeHead(500, { 'Content-type': 'text/html' });
   //       res.end("<h1>Internal Server Error!</h1>");
   //       return;
   //     }
   //    const productData = JSON.parse(data); //–ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ JSON-—Ä—è–¥–æ–∫ –Ω–∞ –æ–±'—î–∫—Ç JavaScript
   //    res.writeHead(200, { 'Content-type': 'application/json' });
   //    res.end(data); //–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç —É –≤–∏–≥–ª—è–¥—ñ JSON-—Ä—è–¥–∫–∞
   //  });

   res.writeHead(200, { 'Content-type': 'application/json' });
   res.end(data); //–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç —É –≤–∏–≥–ª—è–¥—ñ JSON-—Ä—è–¥–∫–∞
  } else {
    //–º–∞—î –±—É—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    res.writeHead(404, {
      "Content-type": "text/html",
      "my-own-header": "hello-world",
    }); //–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –∫–æ–¥–æ–º 404
    res.end("<h1>Page not found!</h1>"); //–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç
  }
});

//–ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8000 —ñ —Å–ª—É—Ö–∞—î–º–æ –∑–∞–ø–∏—Ç–∏ –Ω–∞ localhost
server.listen(8000, "127.0.0.1", () => {
  console.log("Listening to requests on port 8000");
});
